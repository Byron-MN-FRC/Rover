// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4859.Rover.subsystems;


import org.usfirst.frc4859.Rover.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.PIDOutput;
import edu.wpi.first.wpilibj.PIDSource;
import edu.wpi.first.wpilibj.PowerDistributionPanel;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;
import edu.wpi.first.wpilibj.AnalogInput;
import edu.wpi.first.wpilibj.DoubleSolenoid;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.DoubleSolenoid.Value;
import com.ctre.phoenix.motorcontrol.can.*;
import com.ctre.phoenix.motorcontrol.ControlMode;
import com.ctre.phoenix.motorcontrol.FeedbackDevice;
import com.ctre.phoenix.motorcontrol.StatusFrameEnhanced;
import org.usfirst.frc4859.Rover.Constants;



/**
 *
 */
public class Climb extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS
    private PowerDistributionPanel pdp = new PowerDistributionPanel();
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private DoubleSolenoid kickStandSolenoid;
    private WPI_TalonSRX feetMotor;
    private DoubleSolenoid gravityShifterSolenoid;
    private AnalogInput proximitySensor;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public boolean cMode = false;
    public double cTime = 10;

    public Climb() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        kickStandSolenoid = new DoubleSolenoid(10, 4, 5);
        addChild("kickStandSolenoid",kickStandSolenoid);
        
        
        feetMotor = new WPI_TalonSRX(7);
        
        
        
        gravityShifterSolenoid = new DoubleSolenoid(10, 2, 3);
        addChild("gravityShifterSolenoid",gravityShifterSolenoid);
        
        
        proximitySensor = new AnalogInput(3);
        addChild("proximitySensor",proximitySensor);
        
        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        motorConfig();
    }
    
    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop

    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public void kickstandup() {
        System.out.println("kickstand up");
        kickStandSolenoid.set(Value.kForward);
    }
    //Method for deploying kickstand
    public void deployKickstand() {
        if (!cMode) {
            System.out.println("Skipping DeployKickstand due to cMode");
            return;
        }
         System.out.println("deployKickstand");
         kickStandSolenoid.set(Value.kReverse);
    }
    //Method for pushing drivetrain forward
    public void shiftGravity() {
        if (!cMode) {
            System.out.println("Skipping ShiftGravity due to cMode");
            return;
        }
        System.out.println("shiftGravity");
        gravityShifterSolenoid.set(Value.kForward);
       // feetMotor.set(.1);
        
    }
    //Method for pulling feet up
    public void raiseFeet() {
        System.out.println("RaiseFeet");
        feetMotor.set(-.6);
    }
     //Method for deploying feet
     public void deployFeet() {
        if (!cMode) {
            System.out.println("Skipping DeployFeet due to cMode");
            return;
        }
       System.out.println("DeployFeet"); 
       
       /*4096 ticks/rev * 10 Rotations in either direction */
       // double targetPos = .6 * 4096 * 5.75;
       // System.out.println("Target position =" + targetPos);
		//feetMotor.set(ControlMode.MotionMagic, targetPos);
         		/* Zero the sensor */
    //	feetMotor.setSelectedSensorPosition(0, Constants.kPIDLoopIdx, Constants.kTimeoutMs); 
        feetMotor.set(.95);
        SmartDashboard.putData(pdp);
    }
    
    //motor config taken from MotionMagic example at https://github.com/CrossTheRoadElec/Phoenix-Examples-Languages
    private void motorConfig() {
        	/* Factory default hardware to prevent unexpected behavior */
		feetMotor.configFactoryDefault();

		/* Configure Sensor Source for Pirmary PID */
		feetMotor.configSelectedFeedbackSensor(FeedbackDevice.CTRE_MagEncoder_Relative,
											Constants.kPIDLoopIdx, 
											Constants.kTimeoutMs);

		/**
		 * Configure Talon SRX Output and Sesnor direction accordingly
		 * Invert Motor to have green LEDs when driving Talon Forward / Requesting Postiive Output
		 * Phase sensor to have positive increment when driving Talon Forward (Green LED)
		 */
		feetMotor.setSensorPhase(true);
		feetMotor.setInverted(true);

		/* Set relevant frame periods to be at least as fast as periodic rate */
		feetMotor.setStatusFramePeriod(StatusFrameEnhanced.Status_13_Base_PIDF0, 10, Constants.kTimeoutMs);
		feetMotor.setStatusFramePeriod(StatusFrameEnhanced.Status_10_MotionMagic, 10, Constants.kTimeoutMs);

		/* Set the peak and nominal outputs */
		feetMotor.configNominalOutputForward(0, Constants.kTimeoutMs);
		feetMotor.configNominalOutputReverse(0, Constants.kTimeoutMs);
		feetMotor.configPeakOutputForward(1, Constants.kTimeoutMs);
		feetMotor.configPeakOutputReverse(-1, Constants.kTimeoutMs);

		/* Set Motion Magic gains in slot0 - see documentation */
		feetMotor.selectProfileSlot(Constants.kSlotIdx, Constants.kPIDLoopIdx);
		feetMotor.config_kF(Constants.kSlotIdx, Constants.kGains.kF, Constants.kTimeoutMs);
		feetMotor.config_kP(Constants.kSlotIdx, Constants.kGains.kP, Constants.kTimeoutMs);
		feetMotor.config_kI(Constants.kSlotIdx, Constants.kGains.kI, Constants.kTimeoutMs);
		feetMotor.config_kD(Constants.kSlotIdx, Constants.kGains.kD, Constants.kTimeoutMs);
		/* Set acceleration and vcruise velocity - see documentation */
		feetMotor.configMotionCruiseVelocity(15000, Constants.kTimeoutMs);
		feetMotor.configMotionAcceleration(6000, Constants.kTimeoutMs);

		/* Zero the sensor */
		feetMotor.setSelectedSensorPosition(0, Constants.kPIDLoopIdx, Constants.kTimeoutMs);
    }
    public int getProximity(){
       return proximitySensor.getValue();
    }
    public void deployStop(){
        feetMotor.set(0);
    }

    // Get methods to put on dashboard, etc.
    public TalonSRX getFeetMotor() { return feetMotor; }
    public DoubleSolenoid getKickstand() { return kickStandSolenoid; }
    public AnalogInput getProximitySensor() {return proximitySensor;}
    public DoubleSolenoid getGravityShifterSolenoid() {return gravityShifterSolenoid;};
}


