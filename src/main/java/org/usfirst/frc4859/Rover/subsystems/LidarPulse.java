// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4859.Rover.subsystems;


import org.usfirst.frc4859.Rover.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.PIDOutput;
import edu.wpi.first.wpilibj.PIDSource;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.DigitalInput;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


import edu.wpi.first.wpilibj.Counter;
import edu.wpi.first.wpilibj.DigitalSource;
import edu.wpi.first.wpilibj.command.Subsystem;

/**
 *
 */
public class LidarPulse extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private DigitalInput lidarTest;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public LidarPulse() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        lidarTest = new DigitalInput(2);
        addChild("lidarTest",lidarTest);
        
        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new LidarCommand());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop

    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    public class LIDARSubsystem extends Subsystem {

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        // Set the default command for a subsystem here.
        setDefaultCommand(new LidarCommand());
    }
    
    private static final int CALIBRATION_OFFSET = -6;

    private Counter counter;
    private int printedWarningCount = 5;

    /**
     * Create an object for a LIDAR-Lite attached to some digital input on the roboRIO
     * 
     * @param source The DigitalInput or DigitalSource where the LIDAR-Lite is attached (ex: new DigitalInput(9))
     */
    public void initLIDAR(DigitalSource source) {
    	counter = new Counter(source);
        counter.setMaxPeriod(1.0);
        // Configure for measuring rising to falling pulses
        counter.setSemiPeriodMode(true);
        counter.reset();
    }

    /**
     *  Used to get distance in cm
     * @param rounded true ? false: Get distance in inches as rounded number?
     * @return Distance in inches
     */
    public double getDistanceCm(boolean rounded) {
    	double cm;
    	/* If we haven't seen the first rising to falling pulse, then we have no measurement.
    	 * This happens when there is no LIDAR-Lite plugged in, btw.
    	 */
    	if (counter.get() < 1) {
    		if (printedWarningCount-- > 0) {
    			System.out.println("LidarLitePWM: waiting for distance measurement");
    		}
    		return 0;
    	}
    	/* getPeriod returns time in seconds. The hardware resolution is microseconds.
    	 * The LIDAR-Lite unit sends a high signal for 10 microseconds per cm of distance.
    	 */
    	cm = (counter.getPeriod() * 1000000.0 / 10.0) + CALIBRATION_OFFSET;
    	if(!rounded) {
    	return cm;
    	}else {
       	return  Math.floor(cm*10)/10;
    	}
    }
    /**
     *  Used to get distance in Inches
     * @param rounded true ? false: Get distance in inches as rounded number?
     * @return Distance in inches
     */
    public double getDistanceIn(boolean rounded) {
    	double in = getDistanceCm(true) * 0.393700787;
    	if(!rounded) {
    	return in;
    	}else {
    	return  Math.floor(in*10)/10;
    	}
    }
    
    
    }
}


