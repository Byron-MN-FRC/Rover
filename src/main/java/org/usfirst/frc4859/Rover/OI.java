// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4859.Rover;

import org.usfirst.frc4859.Rover.commands.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.*;
import org.usfirst.frc4859.Rover.subsystems.*;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public JoystickButton btnDeployCatapult;
    public JoystickButton btnFlipMode;
    public JoystickButton btnDriveVisionTarget;
    public JoystickButton btnLiftToHeight;
    public JoystickButton btnDeployAcquisition;
    public JoystickButton btnDriveForProx;
    public JoystickButton btnStartClimb;
    public JoystickButton btnDeployKickstand;
    public Joystick joystick;
    public JoystickButton cargoBallDeliver;
    public JoystickButton lowRocketDeliver;
    public JoystickButton mediumRocketDeliver;
    public JoystickButton climbReady;
    public Joystick xBox;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        xBox = new Joystick(1);
        
        climbReady = new JoystickButton(xBox, 10);
        climbReady.whenPressed(new ClimbMode());
        mediumRocketDeliver = new JoystickButton(xBox, 4);
        mediumRocketDeliver.whenPressed(new DeployCatapult());
        lowRocketDeliver = new JoystickButton(xBox, 2);
        lowRocketDeliver.whenPressed(new DeployCatapult());
        cargoBallDeliver = new JoystickButton(xBox, 1);
        cargoBallDeliver.whenPressed(new DeployCatapult());
        joystick = new Joystick(0);
   
        btnDeployKickstand = new JoystickButton(joystick, 12);
        btnDeployKickstand.whenPressed(new DeployKickstand());
        btnStartClimb = new JoystickButton(joystick, 10);
        btnStartClimb.whenPressed(new StartClimb());
        btnDriveForProx = new JoystickButton(joystick, 9);
        btnDriveForProx.whenPressed(new DriveForwardProximity(0, 0));
        btnDeployAcquisition = new JoystickButton(joystick, 6);
        btnDeployAcquisition.whenPressed(new DeployAcquisition());
        btnLiftToHeight = new JoystickButton(joystick, 4);
        btnLiftToHeight.whenPressed(new LiftToHeight());
        btnDriveVisionTarget = new JoystickButton(joystick, 3);
        btnDriveVisionTarget.whileHeld(new DriveToVisionTarget());
        btnFlipMode = new JoystickButton(joystick, 2);
        btnFlipMode.toggleWhenPressed(new FlipMode());
        btnDeployCatapult = new JoystickButton(joystick, 1);
        btnDeployCatapult.whenPressed(new DeployCatapult());


        // SmartDashboard Buttons

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        // SmartDashboard.putData("DriveWithJoystick", new DriveWithJoystick());
        // SmartDashboard.putData("DriveForwardTimed: FiveSeconds", new DriveForwardTimed(5, .4));
        // SmartDashboard.putData("DriveToVisionTarget", new DriveToVisionTarget());
        // SmartDashboard.putData("MoveHatch: Vertical", new MoveHatch(1));
        // SmartDashboard.putData("MoveHatch: NearGround", new MoveHatch(2));
        // SmartDashboard.putData("MoveHatch: OnGround", new MoveHatch(3));
        // SmartDashboard.putData("MoveHatch: Stowed", new MoveHatch(0));
        // SmartDashboard.putData("FlipMode", new FlipMode());
        // SmartDashboard.putData("DeployKickstand", new DeployKickstand());
        // SmartDashboard.putData("ShiftGravity", new ShiftGravity());
        // SmartDashboard.putData("AquireBall", new AquireBall());
        // SmartDashboard.putData("AquireDeploy", new AquireDeploy());
        // SmartDashboard.putData("DeployFeet", new DeployFeet());
        // SmartDashboard.putData("StartClimb", new StartClimb());
        // SmartDashboard.putData("DeployAcquisition", new DeployAcquisition());
        // SmartDashboard.putData("RaiseFeet", new RaiseFeet());
        // SmartDashboard.putData("RaiseKickstand", new RaiseKickstand());
        // SmartDashboard.putData("LiftToHeight", new LiftToHeight());
        SmartDashboard.putNumber("Streaming Mode", 0);
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getJoystick() {
        return joystick;
    }

    public Joystick getXBox() {
        return xBox;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}

